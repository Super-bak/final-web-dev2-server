generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  client
  admin
}

model users {
  id              Int               @id @default(autoincrement())
  email           String            @unique @db.VarChar(255)
  password_hash   String
  name            String?           @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  role            UserRole          @default(client)
  activity_logs   activity_logs[]
  addresses       addresses[]
  cart_items      cart_items[]
  orders          orders[]
  payment_methods payment_methods[]
  reviews         reviews[]
  wishlists       wishlists[]
}

model products {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  description      String?
  base_price       Decimal            @db.Decimal(10, 2)
  category_id      Int?
  image_url        String?
  product_variants product_variants[]
  categories       categories?        @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  reviews          reviews[]
}

model categories {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(50)
  discount Decimal?   @db.Decimal(5, 2)
  products products[]
}

model product_variants {
  id          Int           @id @default(autoincrement())
  product_id  Int?
  size        String?       @db.VarChar(20)
  color       String?       @db.VarChar(50)
  edition     String?       @db.VarChar(50)
  price       Decimal       @db.Decimal(10, 2)
  stock_qty   Int
  cart_items  cart_items[]
  order_items order_items[]
  products    products?     @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  wishlists   wishlists[]
}

model orders {
  id             Int           @id @default(autoincrement())
  user_id        Int?
  total_amount   Decimal       @db.Decimal(10, 2)
  payment_method String        @db.VarChar(50)
  is_paid        Boolean?      @default(false)
  status         String?       @default("pending") @db.VarChar(50)
  created_at     DateTime?     @default(now()) @db.Timestamp(6)
  order_items    order_items[]
  users          users?        @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model order_items {
  id               Int               @id @default(autoincrement())
  order_id         Int?
  variant_id       Int?
  product_name     String            @db.VarChar(255)
  size             String?           @db.VarChar(20)
  color            String?           @db.VarChar(50)
  edition          String?           @db.VarChar(50)
  unit_price       Decimal           @db.Decimal(10, 2)
  quantity         Int
  subtotal         Decimal?          @default(dbgenerated("(unit_price * (quantity)::numeric)")) @db.Decimal(10, 2)
  orders           orders?           @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_variants product_variants? @relation(fields: [variant_id], references: [id], onUpdate: NoAction)
}

model wishlists {
  id               Int               @id @default(autoincrement())
  user_id          Int?
  variant_id       Int?
  added_at         DateTime?         @default(now()) @db.Timestamp(6)
  users            users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_variants product_variants? @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  rating     Int?
  comment    String?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model activity_logs {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  action      String    @db.VarChar(50)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction)
}

model addresses {
  id          Int     @id @default(autoincrement())
  user_id     Int?
  street      String  @db.VarChar(255)
  city        String  @db.VarChar(100)
  state       String  @db.VarChar(100)
  country     String  @db.VarChar(100)
  postal_code String  @db.VarChar(20)
  is_default  Boolean @default(false)
  users       users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model cart_items {
  id               Int               @id @default(autoincrement())
  user_id          Int?
  variant_id       Int?
  quantity         Int               @default(1)
  added_at         DateTime?         @default(now()) @db.Timestamp(6)
  users            users?            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  product_variants product_variants? @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model payment_methods {
  id               Int     @id @default(autoincrement())
  user_id          Int?
  card_number      String  @db.VarChar(19)
  expiry_date      String  @db.VarChar(5)
  card_holder_name String  @db.VarChar(100)
  is_default       Boolean @default(false)
  users            users?  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
